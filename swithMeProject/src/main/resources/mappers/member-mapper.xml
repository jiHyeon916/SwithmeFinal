<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">
	<resultMap id="CalendarResultSet" type="calendar">
		<result column="CALENDAR_NO" property="calendarNo" />
		<result column="MEMBER_ID" property="memberId" />
		<result column="START_DAY" property="startDay" />
		<result column="END_DAY" property="endDay" />
		<result column="CALENDAR_TITLE" property="calendarTitle" />
		<result column="CALENDAR_CONTENT" property="calendarContent" />
		<result column="TEXTCOLOR" property="textColor" />
		<result column="BACKGROUNDCOLOR" property="backgroundColor" />
	</resultMap>
	
	<resultMap id="TodoListResultSet" type="todoList">
		<result column="TODO_NO" property="todoNo" />
		<result column="MEMBER_ID" property="memberId" />
		<result column="TODO_DATE" property="todoDate" />
		<result column="TODO_CONTENT" property="todoContent" />
		<result column="TODO_STATUS" property="todoStatus" />
				<result column="ACHIEVEMENT_RATE" property="achievementRate" />	
	</resultMap>
	
	<resultMap id="pointResultSet" type="point">
		<result column="MEMBER_ID"		property="memberId" />
		<result column="POINT_SCORE"	property="pointScore" />
		<result column="POINT_DETAIL"	property="pointDetail" />
		<result column="POINT_STATUS"	property="pointStatus" />
		<result column="POINT_TIME"		property="pointTime" />
	</resultMap>
	
	<resultMap id="alarmResultSet" type="alarm">
		<result column="ALARM_NO"			property="alarmNo" />
		<result column="ALARM_MEMBER_ID"	property="alarmMemberId" />
		<result column="ALARM_BOARD_NO"		property="alarmBoardNo" />
		<result column="ALARM_CATEGORY"		property="alarmCategory" />
		<result column="ALARM_DATE"			property="alarmDate" />
		<result column="ALARM_STATUS"		property="alarmStatus" />
		<result column="ALARM_SORT"			property="alarmSort" />
	</resultMap>
	
	<resultMap id="qnaResultSet" type="qna">
		<result column="QNA_NO"			property="qnaNo" />
		<result column="MEMBER_ID"		property="memberId" />
		<result column="QNA_TITLE"		property="qnaTitle" />
		<result column="QNA_CONTENT"	property="qnaContent" />
		<result column="QNA_DATE"		property="qnaDate" />
		<result column="QNA_STATUS"		property="qnaStatus" />
	</resultMap>
	
	<resultMap id="boardResultSet" type="board">
		<result column="BOARD_NO" 		property="boardNo" />
		<result column="MEMBER_ID" 		property="memberId" />
		<result column="BOARD_TYPE"		property="boardType" />
		<result column="CATEGORY" 		property="category" />
		<result column="BOARD_TITLE" 	property="boardTitle" />
		<result column="BOARD_CONTENT" 	property="boardContent" />
		<result column="CREATE_DATE" 	property="createDate" />
		<result column="BOARD_STATUS" 	property="status" />
		<result column="BOARD_COUNT" 	property="count" />
		<result column="SUMMARY" 		property="summary" />
		<result column="HASHTAG_NAME" 	property="tagList" />
		<result column="LIKECOUNT" 		property="likeCount" />
		<result column="COMMENTCOUNT" 	property="commentCount" />
	</resultMap>
	
	<resultMap id="replyResultSet" type="reply">
		<result column="BOARD_REPLY_NO" 		property="boardReplyNo" />
		<result column="BOARD_NO" 				property="boardNo" />
		<result column="MEMBER_ID" 				property="memberId" />
		<result column="BOARD_REPLY_CONTENT" 	property="boardReplyContent" />
		<result column="BOARD_REPLY_FILE" 		property="boardReplyFile" />
		<result column="BOARD_REPLY_CREATE_DATE" property="createDate" />
		<result column="BOARD_STATUS" 			property="status" />
		<result column="BOARD_TYPE" 			property="boardType" />
		<result column="BOARD_TITLE" 			property="boardTitle" />
	</resultMap>
	
	<resultMap id="MyStudyBandResultSet" type="Band">
		<result column="SB_NO" property="sbNo" />
		<result column="MEMBER_ID" property="memberId" />	
		<result column="SB_TITLE" property="sbTitle" />
		<result column="SB_INTRODUCE" property="sbIntroduce" />
		<result column="SB_CHANGE_NAME" property="sbChangeName" />
		<result column="SB_RECRUIT_MEM" property="sbRecruitMem" />
		<result column="SB_NOW_MEM" property="sbNowMem" />
		<result column="SB_STATUS" property="sbStatus" />
		<result column="CATEGORY" property="category" />
		<result column="CREATE_DATE" property="createDate" />
	</resultMap>

	
	<!-- 희재 -->
	<!-- 일정 조회 -->
	<select id="selectMyCalendarlList" parameterType="string" resultMap="CalendarResultSet">
		SELECT
			CALENDAR_NO
			,TO_char(START_DAY, 'YYYY-MM-DD') AS "START_DAY"
			,TO_char(END_DAY, 'YYYY-MM-DD') AS "END_DAY"
			,CALENDAR_TITLE
			,CALENDAR_CONTENT
			,COLOR
		FROM
			CALENDAR
		WHERE
			MEMBER_ID= #{memberId}
	</select>
	
	<!-- 일정 추가 -->
	<insert id="addSchedule" parameterType="Calendar">
		INSERT
		INTO 
			CALENDAR
			(CALENDAR_NO, MEMBER_ID, START_DAY, END_DAY, CALENDAR_TITLE, CALENDAR_CONTENT, COLOR)
		VALUES
			(SEQ_CALENDAR_NO.NEXTVAL, #{memberId}, #{startDay}, #{endDay}, #{calendarTitle}, #{calendarContent}, #{color} )
	</insert>
	
	<!-- 일정 삭제 -->
	<delete id="deleteSchedule" parameterType="Calendar">
		DELETE
		FROM
			CALENDAR
		WHERE
			CALENDAR_NO=#{calendarNo}
		AND
			MEMBER_ID=#{memberId}
	</delete>
	
	<!-- 일정 수정 -->
	<update id="updateScehdule" parameterType="Calendar">
		UPDATE
			CALENDAR
		SET
			CALENDAR_TITLE=#{calendarTitle}
			,CALENDAR_CONTENT=#{calendarContent}
			,START_DAY=#{startDay}
			,END_DAY=#{endDay}
		WHERE
			CALENDAR_NO=#{calendarNo}
		AND
			MEMBER_ID=#{memberId}
	</update>
	
	<!-- todoList 리스트 조회 -->
	<select id="selectTodoList" parameterType="todoList" resultMap="TodoListResultSet" >
		SELECT 
			TODO_NO
			,TODO_DATE
			,TODO_CONTENT
			,TODO_STATUS
		FROM
			TODOLIST
		WHERE
			MEMBER_ID=#{memberId}
		AND
			TODO_DATE=#{todoDate}
	</select>
	
	<select id="todoAchievementRateList" parameterType="string" resultMap="TodoListResultSet">
		SELECT 
			TO_char(TODO_DATE, 'YYYY-MM-DD') AS TODO_DATE 
			,ROUND(COUNT(CASE WHEN TODO_STATUS='N' THEN 1 END) / COUNT(TODO_STATUS)*100) AS ACHIEVEMENT_RATE
		FROM
			TODOLIST
		WHERE 
			MEMBER_ID=#{memberId}
		GROUP BY TODO_DATE
		ORDER BY TODO_DATE
	
	</select>
	
	
	
	<!-- todoList 추가 -->
	<insert id="insertTodoList" parameterType="TodoList">
		INSERT
		INTO
			TODOLIST
		VALUES
			(
			SEQ_TODO_NO.NEXTVAL
			,#{memberId}
			,#{todoDate}
			,#{todoContent}
			,'Y'
			)
	</insert>
	
	<!-- todoList 삭제 -->
	<delete id="deleteTask" parameterType="TodoList">
		DELETE
		FROM
			TODOLIST
		WHERE
			TODO_NO=#{todoNo}
		AND
			MEMBER_ID=#{memberId}
	</delete>
	
	<!-- todoList 체크 -->
	<update id="checkTodoList" parameterType="_int">
		UPDATE
			TODOLIST
		SET
			TODO_STATUS='N'
		WHERE
			TODO_NO=#{todoNo}
	</update>
	
	<!-- todoList 안체크 -->
	<update id="uncheckTodoList" parameterType="_int">
		UPDATE
			TODOLIST
		SET
			TODO_STATUS='Y'
		WHERE
			TODO_NO=#{todoNo}
	</update>
	
	<!-- myStudyBand List 조회 -->
	<select id="allStudyBandList" parameterType="string" resultMap="MyStudyBandResultSet">
		SELECT DISTINCT
			SB_NO
			,SB_TITLE
			,SB_INTRODUCE
			,SB_CHANGE_NAME
		FROM
			SBAND
		WHERE
			MEMBER_ID=#{memberId}
	</select>
	
	<select id="favoriteStudyBand" parameterType="string" resultMap="MyStudyBandResultSet">
		SELECT 
			SB_NO
		FROM 
			SBAND_BOOKMARK
	</select>
	
	<!-- 스터디밴드 북마크 추가 -->
	<insert id="insertSbandBookmark" parameterType="BandBookMark">
		INSERT
		INTO
			SBAND_BOOKMARK
		VALUES
			(
			#{sbNo}
			,#{memberId}
			)
	</insert>
	
	<delete id="deleteSbandBookmark" parameterType="BandBookMark">
		DELETE
		FROM
			SBAND_BOOKMARK
		WHERE
			SB_NO=#{sbNo}
		AND
			MEMBER_ID=#{memberId}
	</delete>
	
	<!-- 북마크 게시글 수  -->
	<select id="selectBookMarkListCount" parameterType="string" resultType="_int">
	SELECT COUNT(*)
	  		 FROM
	          	 BOARD_LB A
	  		 JOIN
	          	 MEMBER USING(MEMBER_ID)
		LEFT JOIN
	            (
	            SELECT BOARD_NO,CATEGORY,BOARD_TITLE ,SUMMARY ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') AS "CREATE_DATE" ,BOARD_TYPE 
	            FROM MAINBOARD 
	            WHERE BOARD_STATUS='Y') B ON(A.BOARD_NO = B.BOARD_NO)
	        WHERE
	            STATUS_LB = 'B'
	        AND
	            MEMBER_ID=#{memberId}
	</select>
	
	<!-- 게시글 북마크 조회 -->
	<select id="selectBoardBookMarkList" parameterType="string" resultMap="boardResultSet">
		SELECT 
			A.BOARD_NO
			,CATEGORY
			,BOARD_TITLE 
			,SUMMARY 
			,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') AS "CREATE_DATE"
			,BOARD_TYPE
		FROM 
			BOARD_LB A
		JOIN 
			MAINBOARD B ON(A.BOARD_NO = B.BOARD_NO)
		WHERE 
			STATUS_LB='B'
		AND 
			A.MEMBER_ID=#{memberId}
	</select>
	
	<!-- 게시글 북마크 선택 삭제 -->
	<delete id="deleteBoardBookMark" parameterType="_int">
		DELETE
		FROM
			BOARD_LB
		WHERE
			BOARD_NO=#{boardNo}
	</delete>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- 지현 -->
	
		<!-- 아이디 체크용 쿼리  -->
		<select id="idCheck" resultType="_int"><!-- v파라미터다시 -->
			SELECT
				COUNT(*)
			FROM
				MEMBER
			WHERE	
				MEMBER_ID = #{checkId}
				
		</select>
		
		<!-- 닉네임 체크용 쿼리 -->
		<select id="nickCheck" resultType="_int" parameterType="string">
			SELECT
				COUNT(*)
			FROM
				MEMBER
			WHERE
				NICKNAME = #{checkNick}
			
		</select>
		
		<!-- 이메일 중복 체크용 쿼리 -->
		<select id="emailCheck" resultType="_int" parameterType="string">
			SELECT 
				COUNT(*)
			FROM
				MEMBER
			WHERE
				MEMBER_EMAIL = #{checkEmail}	
			
		</select>
		
		<insert id="joinMember"  parameterType="member">
			INSERT
				INTO
					MEMBER
					(
					MEMBER_ID
					,MEMBER_PWD
					,MEMBER_NAME
					,MEMBER_EMAIL
					,NICKNAME
					
					)
				VALUES
				(
					#{memberId}
					,#{memberPwd}
					,#{memberName}
					,#{memberEmail}
					,#{nickName}
				)
		</insert>
		
		<!-- 회원가입 시 포인트 추가 -->
		<insert id="joinPoint" parameterType="member">
			INSERT
				INTO
					POINT
						(
						MEMBER_ID
						,POINT_SCORE
						,POINT_DETAIL
						,POINT_STATUS
						,POINT_TIME
						)
					VALUES
						(
						#{memberId}
						,500
						,'회원가입'
						, 'Y'
						, SYSDATE
						)	
					
		
		</insert>
		 <!-- 로그인 -->
	      <select id="loginMember" parameterType="member" resultType="member">
	         SELECT 
	               MEMBER_ID             memberId
	               ,MEMBER_PWD          memberPwd
	               ,MEMBER_NAME         memberName
	               ,MEMBER_EMAIL         memberEmail
	               ,NICKNAME            nickName
	               ,MEMBER_ENROLL_DATE      memberEnrollDate
	               ,MEMBER_STATUS         memberStatus
	            FROM   
	               MEMBER
	            WHERE
	               MEMBER_ID = #{memberId}
	            AND
	               MEMBER_STATUS = 'Y'   
	         
	      </select>
	      <!-- 로그인 시 출석 POINT 조회 -->
	      <select id="loginPointChk" parameterType="member" resultType="_int">
	         SELECT
	               COUNT(*)
	            FROM
	               POINT
	            WHERE
	               MEMBER_ID = #{memberId}
	               AND 
	                  POINT_DETAIL = '출석'
	               AND 
	                  TO_CHAR(POINT_TIME,'YYYYMMDD') = TO_CHAR(SYSDATE,'YYYYMMDD')
	      
	      </select>
	      
	      <!-- 로그인시 포인트 insert -->
	      <insert id="loginPointInsert" parameterType="member">
	         INSERT
	            INTO
	               POINT
	               (MEMBER_ID
	               ,POINT_SCORE
	               ,POINT_DETAIL
	               ,POINT_STATUS
	               ,POINT_TIME)
	            VALUES
	               (
	               #{memberId}
	               ,30
	               ,'출석'
	               ,'Y'
	               ,SYSDATE
	               )   
	      </insert>
	      
	      <!-- 아이디 찾기 -->
	      <select id="memberSerchId" parameterType="member" resultType="member">
	         SELECT
	               MEMBER_ID       memberId
	            FROM
	               MEMBER
	            WHERE
	               MEMBER_NAME = #{memberName}
	            AND
	               MEMBER_EMAIL = #{memberEmail}   
	            AND 
	                MEMBER_STATUS = 'Y'      
	            
	      </select>
	      
      	<!-- 회원탈퇴 -->
      	<update id="deleteMember" parameterType="member">
      		UPDATE
      			MEMBER
      		SET
      			MEMBER_STATUS = 'N'
      		WHERE
      			MEMBER_ID = #{memberId}
      		
      	</update>
      	
      	<!-- 기존 비밀번호 확인  // -->
      	<select id="memberPwdChk" parameterType="string" resultType="_int">
      		SELECT
      			COUNT(*)
      		FROM
      			MEMBER
      		WHERE		
      			MEMBER_ID = ${memberId}
      		AND
      			MEMBER_PWD = ${memberEpwdChk}	
      	</select>

      	
      	<!-- 정보수정 -->
      	<update id="updateMember" parameterType="member">
      		UPDATE
      			MEMBER
      		SET	
      			MEMBER_PWD = #{memberPwd}
      			,MEMBER_NAME = #{memberName}
      			,MEMBER_EMAIL = #{memberEmail}
      			,NICKNAME = #{nickName}
      		WHERE
      			MEMBER_ID = #{memberId}			
      	</update>
      	
      	
      	<!-- 비밀번호 찾기(회원이 입력한 값이 일치한지 확인) -->
      	<select id="memberSearchPwd" parameterType="member" resultType="member">
      	  	SELECT
      	  		MEMBER_ID 	memberId
      	  		,MEMBER_EMAIL memberEmail
      	  	FROM
      	  		MEMBER
      	  	WHERE
        	  	MEMBER_ID = #{memberId}
      	  	AND
      	  		MEMBER_EMAIL = #{memberEmail}	
      	  	AND 
      	  		MEMBER_STATUS = 'Y'				
      	</select>
      	
      	
      	
      	<!-- 이메일 임시번호 저장 -->
      	<update id="sendMailInsert" parameterType="member">
      		UPDATE
      				MEMBER
      			SET
      				MEMBER_PWD = #{memberPwd}
      			WHERE
      				MEMBER_EMAIL = #{memberEmail}	
      	</update>
		
		<!-- 알림 조회 -->
		<select id="selectAlarmList" parameterType="string" resultMap="alarmResultSet">
		SELECT ALARM_CATEGORY, ALARM_BOARD_NO , SUBSTR(ALARM_NO, 1, 1) "ALARM_SORT", TO_CHAR(ALARM_DATE, 'YYYY-MM-DD HH:MI:SS') "ALARM_DATE", S.ALARM_STATUS
		                  FROM BOARD_ALARM S
		                 WHERE ALARM_MEMBER_ID = #{memberId}
		                 UNION ALL
		                	SELECT ALARM_CATEGORY, ALARM_SB_NO, SUBSTR(ALARM_NO, 1, 1) "ALARM_SORT", TO_CHAR(ALARM_DATE, 'YYYY-MM-DD HH:MI:SS') "ALARM_DATE", B.ALARM_STATUS
		                  FROM BAND_ALARM B
		                 	WHERE ALARM_MEMBER = #{memberId}
		                 ORDER 
		                    BY ALARM_DATE DESC
			</select>
		
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
	<!-- 유진 -->
	
	<!-- 토탈포인트 -->
	<select id="selectTotalPoint" parameterType="string" resultType="_int">
		SELECT A - B
		  FROM (SELECT DISTINCT
		               CASE WHEN (SELECT COUNT(*)
		                            FROM POINT
		                           WHERE POINT_STATUS = 'Y'
		                             AND MEMBER_ID = #{memberId} ) > 0
		                    THEN (SELECT DISTINCT SUM(POINT_SCORE) OVER(PARTITION BY POINT_STATUS ORDER BY POINT_STATUS)
		                            FROM POINT
		                           WHERE POINT_STATUS = 'Y'
		                             AND MEMBER_ID = #{memberId} )
		                    ELSE 0
		                     END AS "A", MEMBER_ID
		         FROM POINT
		        WHERE MEMBER_ID = #{memberId} )
		  JOIN (SELECT DISTINCT
		                CASE WHEN (SELECT COUNT(*)
		                             FROM POINT
		                            WHERE POINT_STATUS = 'N'
		                              AND MEMBER_ID = #{memberId} ) > 0 
		                     THEN (SELECT DISTINCT SUM(POINT_SCORE) OVER(PARTITION BY POINT_STATUS ORDER BY POINT_STATUS)
		                             FROM POINT
		                            WHERE POINT_STATUS = 'N'
		                              AND MEMBER_ID = #{memberId} )
		                     ELSE 0
		                      END AS "B", MEMBER_ID
		         FROM POINT
		        WHERE MEMBER_ID = #{memberId} ) USING (MEMBER_ID)
	</select>

	<!-- 마이페이지 메인 포인트내역(최신3개) -->
	<select id="selectPointList3" parameterType="string" resultMap="pointResultSet">
		SELECT *
		  FROM (SELECT ROWNUM, A.*
		          FROM (SELECT POINT_DETAIL, POINT_STATUS, POINT_SCORE
		                  FROM POINT
		                 WHERE MEMBER_ID = #{memberId}
		                 ORDER
		                    BY POINT_TIME DESC) A)
		 WHERE ROWNUM BETWEEN 1 AND 3
	</select>
	
	<!-- 포인트 내역 수 -->
	<select id="myPointListCount" parameterType="string" resultType="_int">
		SELECT COUNT(*)
		  FROM POINT
		 WHERE MEMBER_ID = #{ memberId }
	</select>
	
	<!-- 사용자의 포인트 리스트 조회 -->
	<select id="myPointList" parameterType="string" resultMap="pointResultSet">
		SELECT POINT_STATUS, POINT_SCORE, POINT_DETAIL, TO_CHAR(POINT_TIME, 'YYYY-MM-DD') "POINT_TIME"
		  FROM POINT
		 WHERE MEMBER_ID = #{ memberId }
		 ORDER
		    BY POINT_TIME DESC
	</select>
	
	<!-- 오늘 얻은 포인트 가져오기(적립내용만) -->
	<select id="todayPoint" parameterType="string" resultType="_int">
		SELECT NVL(MAX(A), 0)
		  FROM (SELECT distinct SUM(POINT_SCORE) OVER(PARTITION BY POINT_STATUS ORDER BY POINT_STATUS) "A", MEMBER_ID
		          FROM POINT
		         WHERE POINT_STATUS = 'Y'
		           AND MEMBER_ID = 'user03'
		           AND TO_CHAR(SYSDATE, 'YYYYMMDD') = TO_CHAR(POINT_TIME, 'YYYYMMDD'))
	</select>
	
	<!-- 마이페이지 메인 알림내역(최신5개) -->
	<select id="selectAlarmList5" parameterType="string" resultMap="alarmResultSet">
		SELECT *
		  FROM (SELECT ROWNUM, A.*
		          FROM (SELECT ALARM_CATEGORY, ALARM_BOARD_NO , SUBSTR(ALARM_NO, 1, 1) "ALARM_SORT", TO_CHAR(ALARM_DATE, 'YYYY-MM-DD HH:MI:SS') "ALARM_DATE"
		                  FROM BOARD_ALARM
		                 WHERE ALARM_MEMBER_ID = #{memberId}
		                 UNION ALL
		                SELECT ALARM_CATEGORY, ALARM_SB_NO, SUBSTR(ALARM_NO, 1, 1) "ALARM_SORT", TO_CHAR(ALARM_DATE, 'YYYY-MM-DD HH:MI:SS') "ALARM_DATE"
		                  FROM BAND_ALARM
		                 WHERE ALARM_MEMBER = #{memberId}
		                 ORDER 
		                    BY ALARM_DATE DESC) A)
		 WHERE ROWNUM BETWEEN 1 AND 5
	</select>

	<!-- 사용자가 작성한 게시글 수 가져오기 -->
	<select id="myBoardListCount" parameterType="board" resultType="_int">
		SELECT COUNT(*)
		  FROM MAINBOARD
		 WHERE MEMBER_ID = #{memberId}
		   AND BOARD_STATUS = 'Y'
		 <if test="boardType == 'free'">
		   AND BOARD_TYPE = 'free'
		 </if>
		 <if test="boardType == 'info'">
		   AND BOARD_TYPE = 'info'
		 </if>
	</select>

	<!-- 사용자가 작성한 게시글 리스트 조회 -->
	<select id="myBoardList" parameterType="board" resultMap="boardResultSet">
		SELECT
		      DISTINCT
		      A.BOARD_NO
		     ,NICKNAME MEMBER_ID
		     ,CATEGORY
		     ,BOARD_TITLE
		     ,BOARD_CONTENT
		     ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI') AS "CREATE_DATE"
		     ,BOARD_COUNT
		     ,BOARD_TYPE
		     ,SUMMARY 
		     ,COUNT(STATUS_LB)OVER(PARTITION BY B.BOARD_NO) LIKECOUNT
		     ,(COUNT(BOARD_REPLY_CONTENT)OVER(PARTITION BY C.BOARD_NO)) + (NVL(REREPLY,0)) COMMENTCOUNT
		 FROM
		     MAINBOARD A
		 JOIN
		     MEMBER M ON(A.MEMBER_ID = M.MEMBER_ID)
		LEFT JOIN
		    (SELECT BOARD_NO,STATUS_LB
		     FROM BOARD_LB 
		     WHERE STATUS_LB = 'L') B  ON (A.BOARD_NO = B.BOARD_NO)
		LEFT JOIN
		     BOARD_REPLY C ON(C.BOARD_NO = A.BOARD_NO)
		LEFT JOIN
		    (SELECT COUNT(BOARD_NO) REREPLY, BOARD_NO
		     FROM BOARD_RE_REPLY BRR
		     JOIN BOARD_REPLY BR ON(BRR.BOARD_REPLY_NO = BR.BOARD_REPLY_NO)
		     GROUP BY BOARD_NO) D ON(D.BOARD_NO = A.BOARD_NO)
		WHERE
		     A.BOARD_STATUS = 'Y'
		  AND
		     A.MEMBER_ID = #{memberId}
		 <if test="boardType == 'free'">
		   AND BOARD_TYPE = 'free'
		 </if>
		 <if test="boardType == 'info'">
		   AND BOARD_TYPE = 'info'
		 </if>
		 ORDER
		    BY
		      CREATE_DATE DESC
	</select>

	<!-- 사용자가 작성한 댓글 수 가져오기 -->
	<select id="myReplyListCount" parameterType="reply" resultType="_int">
		SELECT COUNT(*)
		  FROM BOARD_REPLY "BR"
		  JOIN MAINBOARD "B" USING(BOARD_NO)
		 WHERE BR.MEMBER_ID = #{memberId}
		   AND BOARD_TYPE = #{boardType}
		   AND B.BOARD_STATUS = 'Y'
		   AND BR.BOARD_STATUS = 'Y'
	</select>
	
	<!-- 사용자가 작성한 댓글 리스트 조회 -->
	<select id="myReplyList" parameterType="reply" resultMap="replyResultSet">
		SELECT BR.BOARD_REPLY_NO
		      ,B.BOARD_NO
		      ,BR.BOARD_REPLY_CONTENT 
		      ,TO_CHAR(BOARD_REPLY_CREATE_DATE, 'YYYY-MM-DD HH:MI:SS') "BOARD_REPLY_CREATE_DATE"
		      ,B.BOARD_STATUS
		      ,B.BOARD_TITLE
		      ,B.BOARD_TYPE
		  FROM BOARD_REPLY "BR"
		  JOIN MAINBOARD "B" ON(B.BOARD_NO = BR.BOARD_NO)
		 WHERE BR.MEMBER_ID = #{ memberId }
		   AND B.BOARD_STATUS = 'Y'
		   AND BR.BOARD_STATUS = 'Y'
		   <if test="boardType == 'free'">
		   AND BOARD_TYPE = 'free'
		 </if>
		 <if test="boardType == 'info'">
		   AND BOARD_TYPE = 'info'
		 </if>
		 ORDER
    		BY BOARD_REPLY_CREATE_DATE DESC
	</select>


	<!-- 문의글 수 가져오기 -->
	<select id="selectQnaListCount" parameterType="qna" resultType="_int">
		SELECT COUNT(*)
		  FROM QNA
		<choose>
			<when test="memberId == 'admin'">
				<if test="qnaStatus == 'Y'.toString()">
				 	WHERE QNA_STATUS = 'Y'
				</if>
				<if test="qnaStatus == 'N'.toString()">
				 	WHERE QNA_STATUS = 'N'
				</if>
			</when>
			<otherwise>
			WHERE MEMBER_ID = #{memberId}
				<if test="qnaStatus == 'Y'.toString()">
			   		AND QNA_STATUS = 'Y'
			 	</if>
			 	<if test="qnaStatus == 'N'.toString()">
			   		AND QNA_STATUS = 'N'
			 	</if>
			</otherwise>
		</choose>
	</select>
	
	<!-- 문의글 리스트 가져오기 -->
	<select id="selectQnaList" parameterType="qna" resultMap="qnaResultSet">
		SELECT QNA_NO, QNA_TITLE, QNA_CONTENT, TO_CHAR(QNA_DATE, 'YYYY-MM-DD') "QNA_DATE", QNA_STATUS
		  FROM QNA 
		 <choose>
			<when test="memberId == 'admin'">
				<if test="qnaStatus == 'Y'.toString()">
				 	WHERE QNA_STATUS = 'Y'
				</if>
				<if test="qnaStatus == 'N'.toString()">
				 	WHERE QNA_STATUS = 'N'
				</if>
			</when>
			<otherwise>
			WHERE MEMBER_ID = #{memberId}
				<if test="qnaStatus == 'Y'.toString()">
			   		AND QNA_STATUS = 'Y'
			 	</if>
			 	<if test="qnaStatus == 'N'.toString()">
			   		AND QNA_STATUS = 'N'
			 	</if>
			</otherwise>
		</choose>
		 ORDER
		    BY QNA_NO DESC
	</select>
	
	<!-- 문의글 작성하기 -->
	<insert id="insertQna" parameterType="qna">
		INSERT 
		  INTO QNA
		  	   (
		  	   QNA_NO
	  		  ,MEMBER_ID
	  		  ,QNA_TITLE 
	  		  ,QNA_CONTENT 
	  		  ,QNA_DATE
	  		  ,QNA_STATUS
	  		   ) 
		VALUES 
			   (
				SEQ_QNA_NO.NEXTVAL
			  ,#{memberId}
			  ,#{qnaTitle}
			  ,#{qnaContent}
			  ,SYSDATE 
			  ,'Y'
			   )
	</insert>
	
	<!-- 작성한 문의글 번호 가져오기 -->
	<select id="selectQnaNo" parameterType="string" resultMap="qnaResultSet">
		SELECT ROWNUM, QNA_NO
		  FROM QNA
		 WHERE MEMBER_ID = #{memberId}
		   AND ROWNUM = 1
		 ORDER
		    BY QNA_NO DESC
	</select>
	
	<!-- 문의글 상세보기 -->
	<select id="qnaDetailView" parameterType="_int" resultMap="qnaResultSet">
		SELECT QNA_NO, 
			   MEMBER_ID, 
			   QNA_TITLE, 
			   QNA_CONTENT, 
			   TO_CHAR(QNA_DATE, 'YYYY-MM-DD') "QNA_DATE",
			   QNA_STATUS
		  FROM QNA
		 WHERE QNA_NO = #{ qno }
	</select>
	
	<!-- 문의글 삭제하기 -->
	<delete id="qnaDelete" parameterType="_int">
		DELETE
		  FROM QNA
		 WHERE QNA_NO = ${ qno }
	</delete>
	
	<!-- 회원가입시 기본 캐릭터 지급 -->
	<insert id="joinItem" parameterType="member">
		INSERT 
		  INTO MEMBER_ITEM
		  	   (
		  	   ITEM_NO
	  		  ,MEMBER_ID
	  		  ,WEAR_STATUS 
	  		   ) 
		VALUES 
			   (
			   0
			  ,#{memberId}
			  ,'Y'
			   )
	</insert>
	
	

</mapper>